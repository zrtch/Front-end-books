// JavaScript中的主表达式包括常量或字面量值、某些语言关键字和变量引用。求值不存在的变量会导致抛出ReferenceError
1.23 // 数值字面量
"hello" //字符串字面量
true //求值为布尔值 true 
null //求值为 null 值
this //求值为“当前”对象
i // 求值为变量讠的值

// 对象和数组初始化程序
// []//空数组：方括号中没有表达式意味着没有元素 
[1 + 2, 3 + 4] // 两个元素的数组。第一个元素是3，第二个是7
//数组初始化程序中的元素表达式在每次数组初始化程序被求值时也会被求值。
let sparseArray = [1, , , , 5] // 包含5个元素，其中有3个未定义元灵

// 方括号变成了花括号，且每个子表达式前面多了一个属性名和一个冒号
let p = { x: 2, y: 3 } // 有两个属性的对象
let q = {} //没有属性的空对象
q.x = 2; q.y = 3 // 现在q拥有了跟p一样的属性

// 函数定义表达式:函数定义表达式通常由关键字function、位于括号中的逗号分隔的零或多个标识符（参数名）， 以及一个位于花括号中的JavaScript代码块（函数体）构成。
// 这个函数返回传入值的平方
let square = function (x) {
  return x * x
}
console.log(square(3)); // 9

// 属性访问表达式求值为对象属性或数组元素的值
let o = { x: 1, y: { z: 3 } }
let a = [o, 4, [5, 6]]
console.log(o.x); // 1 表达式o的属性x
console.log(o.y.z); // 3 表达式 o.y的属性 z
console.log(o["x"]); // 1 对象o的属性x
console.log(a[1]); // 4 表达式a中索引为1的元素
console.log(a[2]['1']); //6 表达式 a[2]中索引为1的元素
// 无论哪种属性访问表达式，位于.或[前面的表达式都会先求值。如果求值结果为nul1或undefined，则表达式会抛出TypeError。

// 条件式属性访问: null和undefined是唯一两个没有属性的值。在使用普通的属性访问表达式时，如果.或[]左侧的表达式求值为 null或undefined，会报TypeError。可以使用？或?.[]语法防止这种错误发生。
// 这种形式的属性访问表达式有时候也被称为“可选链接”，因为它也适用于下面这样更长的属性访问表达式链条。
let b = { c: null }
console.log(b.c?.d); // undefined
// 当然，如果a. b是对象，且这个对象没有名为c的属性， a. b?.c.d仍然会抛出TypeBrror。此时应该再加一个条件式属性访问
let b1 = { c: {} }
console.log(b1.c?.d?.e); // undefined

let d; // 忘记初始化这个变量了！
let index = 0;
try {
  d[index++] // 抛出TypeError
} catch (e) {
  index //抛出TypeError之前发生了递增
}
console.log(d?.[index++]);  //undefined 因为d是undefined
console.log(index); // 1 因为？[〕短路所以没有发生递增

// 调用表达式
// 函数表达式后面跟着左圆括号、逗号分隔的零或多个参数表达式的列表和右圆括号
f(0) // f是函数表达式，0是参数表达式
Math.max(x, y, z) // Math.max 是函数，x、y、z是参数
a.sort() // a.sort是函数，没有参数
// 如果函数使用了return语句返回一个值，则该值就成为调用表达式的值，否则，调用表达式的值是undefined。

// 条件式调用：可以使用?.()而非()来调用函数。总之，条件式调用语法为我们提供了一种更简洁和安全地访问可能不存在的嵌套属性和方法的方法。
function square(x, log) { // ES2020之前，如果想写一个类似sort()的这种接收可选函数参数的方法通常需要在函数内使用if语句检查该函数参数是杏有定义，然后再调用
  if (log) {
    log(x)
  }
  return x * x
}
// 有了ES2020的条件式调用语法，可以简单地使用?.()来调用这个可选的函数，只有在函数有定义时才会真正调用
function square1(x, log) { // 第二个参数是一个可选的函数
  log?.(x)                 // 如果有定义则调用
  return (x * x)           // 返回第一个参数的平方
}

// ?.() 也适用于方法调用
o.m() //常规属性访问，常规调用：o必须是一个对象且必须有一个m属性，且该属性的值必须是函数。
o?.m() //条件式属性访问，常规调用 ：如果o是null或undefined，则表达式求值为undefined。但如果o是任何其他值，则它必须有一个值为函数的属性m。
o.m?.() //常规属性访问，条件式调用：o必须不是null或undefined。如果它没有属性m或属性m的值是nul1，则整个表达式求值为undefined。

// 对象创建表达式：创建一个新对象并调用一个函数（称为构造函数）来初始化这个新对象
new Point(2, 3)

//操作符：用于算术表达式、比较表达式、逻辑表达式、赋值表达式等。
//条件操作符：也称三元操作符 ？：，用于将三个表达式组合为一个表达式
//操作符结合性规定了相同优先级操作的执行顺序
q = a ? b : c ? d : e ? f : g // 等价于下面
q = a ? b : (c ? d : (e ? f : g)) // 三元条件操作符具有右结合性
